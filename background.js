// Generated by CoffeeScript 1.7.1
(function() {
  window.Background = {
    internal: {
      $d: $(document),
      $w: $(window),
      $b: $('body')
    },
    slide: function(option) {
      var ani_style, constructor, doc_hei, op, p, win_hei, _ref;
      p = this.internal;
      constructor = {
        horizontal: "center",
        duration: "1s",
        easeType: "ease-out",
        callback: function() {}
      };
      if (typeof option === "string") {
        option = {
          horizontal: arguments[0],
          duration: arguments[1],
          easeType: arguments[2],
          callback: arguments[3]
        };
      }
      op = $.extend(constructor, option);
      ani_style = "background-position " + op.duration + " " + op.easeType;
      p.$b.css({
        'transition': ani_style,
        'moz-transition': ani_style,
        '-webkit-transition': ani_style,
        '-o-transition': ani_style,
        '-ms-transition': ani_style
      });
      _ref = [p.$d.height(), p.$w.height()], doc_hei = _ref[0], win_hei = _ref[1];
      p.$b.on('transitionend webkitTransitionEnd oTransitionEnd otransitionend', function(event) {
        return op.callback();
      });
      p.$w.on('resize', function(event) {
        return win_hei = $(this).height();
      });
      return p.$w.on('scroll', function(event) {
        var img_scroll, scroll_hei;
        doc_hei = doc_hei === p.$d.height() ? doc_hei : p.$d.height();
        scroll_hei = p.$d.scrollTop();
        img_scroll = scroll_hei / (doc_hei - win_hei) * 100..toFixed(7);
        return p.$b.css("background-position", op.horizontal + (" " + img_scroll + "%"));
      });
    },
    tick: function(option) {
      var c, constructor, op, p, reg_http;
      p = this.internal;
      constructor = {
        json: "",
        backgroundImage: "",
        backgroundColor: ""
      };
      if (typeof option === "string") {
        option = {
          json: arguments[0],
          backgroundImage: arguments[1],
          backgroundColor: arguments[2]
        };
      }
      op = $.extend(constructor, option);
      reg_http = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
      c = function(value) {
        var day, end, moment, now, start, this_moment, _i, _len, _ref, _ref1;
        if (typeof value === "string") {
          value = $.parseJSON(value);
        }
        day = value.backgrounds;
        now = new Date();
        for (_i = 0, _len = day.length; _i < _len; _i++) {
          moment = day[_i];
          start = moment.started.split(":");
          end = moment.ended.split(':');
          if (start[0] === end[0]) {
            if (now.getHours() === parseInt(start[0]) && (start[1] <= (_ref = now.getMinutes()) && _ref <= end[1])) {
              true;
            } else {
              continue;
            }
          } else {
            if ((parseInt(start[0]) < (_ref1 = now.getHours()) && _ref1 < parseInt(end[0]))) {
              true;
            } else if (now.getHours() === parseInt(start[0]) && now.getMinutes() >= parseInt(start[1])) {
              true;
            } else if (now.getHours() === parseInt(end[0]) && now.getMinutes() <= parseInt(end[1])) {
              true;
            } else {
              continue;
            }
          }
          this_moment = moment;
        }
        if (this_moment) {
          if (this_moment.image) {
            p.$b.css("background-image", "url(" + this_moment.image + ")");
          } else if (op.backgroundImage) {
            p.$b.css("background-image", "url(" + op.backgroundImage + ")");
          }
          if (this_moment.color) {
            return p.$b.css("background-color", this_moment.color);
          } else if (op.backgroundColor) {
            return p.$b.css("background-color", op.backgroundColor);
          }
        } else {
          if (op.backgroundImage) {
            p.$b.css("background-image", "url(" + op.backgroundImage + ")");
          }
          if (op.backgroundColor) {
            return p.$b.css("background-color", op.backgroundColor);
          }
        }
      };
      if (typeof op.json === "string") {
        if (reg_http.test(op.json)) {
          return $.ajax({
            url: op.json,
            data: {},
            success: function(value) {
              return c(value);
            },
            error: function() {
              if (op.backgroundImage) {
                p.$b.css("background-image", "url(" + op.backgroundImage + ")");
              }
              if (op.backgroundColor) {
                return p.$b.css("background-color", op.backgroundColor);
              }
            }
          });
        } else {
          return c(op.json);
        }
      } else {
        return c(op.json);
      }
    }
  };

}).call(this);
