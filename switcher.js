// Generated by CoffeeScript 1.7.1
(function() {
  var switcher;

  switcher = {
    slider: function(option) {
      var $doc, constructor, doc_hei, op, win_hei, _ref;
      constructor = {
        x: "",
        et: "",
        d: ""
      };
      op = $.extend(constructor, option);
      $doc = $(document);
      _ref = [$doc.height(), $(this).height()], doc_hei = _ref[0], win_hei = _ref[1];
      $(this).on('resize', function(event) {
        return win_hei = $(this).height();
      });
      return $(this).on('scroll', function(event) {
        var $body, ani_style, img_scroll, scroll_hei;
        doc_hei = doc_hei === $doc.height() ? doc_hei : $doc.height();
        scroll_hei = $doc.scrollTop();
        img_scroll = scroll_hei(doc_hei - win_hei) * 100..toFixed(7);
        $body = $('body');
        ani_style = "background-position " + op.d + " " + op.et;
        $body.css({
          'transition': ani_style,
          'moz-transition': ani_style,
          '-webkit-transition': ani_style,
          '-o-transition': ani_style,
          '-ms-transition': ani_style
        });
        return $body.css("background-position", op.x + (" " + img_scroll + "%"));
      });
    },
    tickby: function(option) {
      var $body, constructor, op;
      constructor = {
        url: "",
        link: "",
        d: [],
        strc: []
      };
      op = $.extend(constructor, option);
      $body = $('body');
      return $.ajax({
        url: op.url,
        data: {},
        success: function(day) {
          var moment, now, this_moment, _i, _len;
          if (typeof day === "string") {
            day = $.parseJSON(day);
          }
          now = new Date().getHours();
          for (_i = 0, _len = day.length; _i < _len; _i++) {
            moment = day[_i];
            if ((parseInt(moment[op.strc[0]]) <= now && now <= parseInt(moment[op.strc[1]]))) {
              this_moment = moment;
            }
          }
          if (this_moment) {
            if (this_moment[strc[2]]) {
              $body.css("background-image", "url(" + this_moment[strc[2]] + ")");
            } else {
              $body.css("background-image", "url(" + op.d[0] + ")");
            }
            if (this_moment[strc[3]]) {
              $body.css("background-color", this_moment[strc[3]]);
            } else {
              $body.css("background-color", op.d[1]);
            }
            if (this_moment[strc[4]]) {
              $body.on('mouseover', function(event) {
                var e, t;
                e = event || window.event;
                t = e.target || e.srcElement;
                if ($(t).hasClass(op.link)) {
                  return $(t).css("cursor", "pointer");
                } else {
                  return $("." + op.link).css("cursor", "");
                }
              });
              return $body.on('click', function(event) {
                var e, t;
                e = event || window.event;
                t = e.target || e.srcElement;
                if ($(t).hasClass(op.link)) {
                  return window.open(this_moment.url);
                }
              });
            }
          } else {
            $body.css("background-image", "url(" + op.error_deal[0] + ")");
            return $body.css("background-color", op.error_deal[1]);
          }
        },
        error: function() {
          $body.css("background-image", "url(" + op.error_deal[0] + ")");
          return $body.css("background-color", op.error_deal[1]);
        }
      });
    }
  };

}).call(this);
